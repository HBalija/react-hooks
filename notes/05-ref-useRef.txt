continue on useCallback

- we don't want to send request on every keystroke, so we'll setup a setTimeout func that will trigger every 500 ms

- when we put our db call inside a setTimeout(), we need to check if titleFilter value is the same as it was 500ms ago

--> closure

- important to know:

  useEffect(() => {
    setTimeout(() => {
      if (OUR CHECK!!!)
      axios.get(url)
        .then(res => {
          onLoadIngredients(res.data);
        });
    }, 500);
  }, [titleFilter, onLoadIngredients]);


for our check:
-------------------
  --> titleFilter will be the one 500ms ago
  - we also need a current value : useRef() hook


  useRef setup
---------------------

define a hook:

      const inputRef = useRef();



setup ref prop (react only prop) to our input element:

      <input
      type="text"
      ref={inputRef}
      value={titleFilter}
      onChange={e => setTitleFilter(e.target.value)} />



inputRef.current --> our input element
inputRef.current.value --> current value of input element


- so we check our old value (titleFilter) in setTiomeout
- with current value of input ref

- if value hasn't changed for 500ms, we'll make the request


our code now:

  useEffect(() => {
    setTimeout(() => {
      if (titleFilter === inputRef.current.value) {
        axios.get(url)
          .then(res => {
            onLoadIngredients(res.data);
          });
      }

    }, 500);
  }, [titleFilter, onLoadIngredients, inputRef]);


  IMPORTANT NOTE:

  - inputRef is also a dependency of our useEffect cause we're using it inside it


--> this makes a delay for our requests, only one is sent after we stop typing for 500 ms
